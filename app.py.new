#!/usr/bin/env python3
"""
SSB Build Server Web Application.

This is the main application file for the SSB Build Server Web application,
which provides a web interface for provisioning RHEL9 virtual machines.
"""
import os
import json
import uuid
import datetime
import subprocess
import requests
import shutil
import tempfile
import re
import bcrypt
from werkzeug.utils import secure_filename
from git import Repo
from git.exc import GitCommandError
from flask import Flask, render_template, request, jsonify, redirect, url_for, flash, session, make_response

# Import custom modules
from config import config
from logger import get_logger, set_context, clear_context, context, log_errors
from error_handler import (
    AppError, ValidationError, AuthenticationError, AuthorizationError, 
    ResourceNotFoundError, VSphereError, AtlantisError, retry, robust_operation
)
from middleware import init_middleware, login_required, role_required, validate_form, api_route

from vsphere_utils import test_vsphere_connection
import vsphere_resources
import vsphere_cache
import apply_terraform

# Create the Flask application
app = Flask(__name__)

# Configure the application
app.secret_key = config.get_secret('FLASK_SECRET_KEY') or 'dev_key_for_development_only'

# Configuration paths
CONFIG_DIR = config.get_path('CONFIG_DIR', 'configs')
TERRAFORM_DIR = config.get_path('TERRAFORM_DIR', 'terraform')
USERS_FILE = config.get_path('USERS_FILE', 'users.json')
GIT_REPO_URL = config.get('GIT_REPO_URL', 'https://github.com/your-org/terraform-repo.git')
GIT_USERNAME = config.get('GIT_USERNAME', '')
GIT_TOKEN = config.get_secret('GIT_TOKEN', '')
ATLANTIS_URL = config.get('ATLANTIS_URL', 'https://atlantis.chrobinson.com')
ATLANTIS_TOKEN = config.get_secret('ATLANTIS_TOKEN', '')

# Get logger for this module
logger = get_logger(__name__)

# Ensure directories exist
os.makedirs(CONFIG_DIR, exist_ok=True)
os.makedirs(TERRAFORM_DIR, exist_ok=True)

# Server location prefix options
SERVER_PREFIXES = {
    # Non-production environments
    'lin2dv2': 'Development',
    'lin2int2': 'Integration',
    'lin2trn2': 'Training',
    # Production environments
    'lin2pr2': 'Production'
}

# Environments categorization
ENVIRONMENTS = {
    "nonprod": ["lin2dv2", "lin2int2", "lin2trn2"],
    "prod": ["lin2pr2"]
}

# Default values for VM configuration
DEFAULT_CONFIG = {
    'num_cpus': 2,
    'memory': 4096,
    'disk_size': 50,
    'additional_disks': []
}

# User roles
ROLE_ADMIN = 'admin'
ROLE_BUILDER = 'builder'

# Initialize application middleware
init_middleware(app)

# Functions to manage environment variables
@robust_operation(error_message="Error reading environment file")
def read_env_file(env_file='.env'):
    """Read environment variables from a .env file"""
    env_vars = {}
    if os.path.exists(env_file):
        with open(env_file, 'r') as f:
            for line in f:
                # Skip comments and empty lines
                line = line.strip()
                if line and not line.startswith('#'):
                    # Handle lines with = in the value
                    if '=' in line:
                        key, value = line.split('=', 1)
                        env_vars[key.strip()] = value.strip()
    return env_vars

@robust_operation(error_message="Error writing environment file")
def write_env_file(env_vars, env_file='.env'):
    """Write environment variables to a .env file"""
    # Create backup of current .env file
    if os.path.exists(env_file):
        backup_file = f"{env_file}.bak"
        shutil.copy2(env_file, backup_file)
        logger.info(f"Created backup of {env_file} at {backup_file}")
    
    # Write new .env file
    with open(env_file, 'w') as f:
        # Group variables by sections
        sections = {
            'Flask Application': ['FLASK_SECRET_KEY'],
            'Timeouts': ['TIMEOUT'],
            'Atlantis Integration': ['ATLANTIS_URL', 'ATLANTIS_TOKEN'],
            'VSphere Connection': ['VSPHERE_USER', 'VSPHERE_PASSWORD', 'VSPHERE_SERVER'],
            'VM Location Details': ['RESOURCE_POOL_ID', 'DEV_RESOURCE_POOL_ID', 'DATASTORE_ID', 
                                    'NETWORK_ID_PROD', 'NETWORK_ID_DEV', 'TEMPLATE_UUID'],
            'NetBox Integration': ['NETBOX_TOKEN', 'NETBOX_URL'],
            'Logging Configuration': ['LOG_LEVEL', 'LOG_FORMAT', 'LOG_FILE'],
            'Error Handling': ['MAX_RETRIES', 'RETRY_DELAY', 'ERROR_LOG_FILE'],
            'Other': []
        }
        
        # Categorize variables
        categorized = set()
        for section, keys in sections.items():
            section_vars = {k: env_vars[k] for k in keys if k in env_vars}
            if section_vars:
                f.write(f"# {section}\n")
                for key, value in section_vars.items():
                    f.write(f"{key}={value}\n")
                f.write("\n")
                categorized.update(section_vars.keys())
        
        # Add any uncategorized variables
        uncategorized = {k: v for k, v in env_vars.items() if k not in categorized}
        if uncategorized:
            f.write("# Other Variables\n")
            for key, value in uncategorized.items():
                f.write(f"{key}={value}\n")
    
    logger.info(f"Successfully wrote {len(env_vars)} environment variables to {env_file}")
    return True

# Ensure USERS_FILE is a valid file path
logger.info(f"Checking USERS_FILE path: {USERS_FILE}")
if not os.path.exists(USERS_FILE):
    if os.path.isdir(USERS_FILE):
        logger.error(f"The USERS_FILE path '{USERS_FILE}' is a directory, not a file.")
        raise IsADirectoryError(f"The USERS_FILE path '{USERS_FILE}' is a directory, not a file. Please check the configuration.")
    else:
        logger.info(f"USERS_FILE does not exist. Creating default users file at: {USERS_FILE}")
        default_users = {
            "admin": {
                "password": "admin123",  # Change this in production
                "role": ROLE_ADMIN,
                "name": "Admin User"
            },
            "builder": {
                "password": "builder123",  # Change this in production
                "role": ROLE_BUILDER,
                "name": "Builder User"
            }
        }
        with open(USERS_FILE, 'w') as f:
            json.dump(default_users, f, indent=2)
        logger.info(f"Default users file created successfully at: {USERS_FILE}")

@robust_operation(error_type=ResourceNotFoundError, error_message="Users file not found")
def load_users():
    """Load users from the users.json file."""
    if not os.path.isfile(USERS_FILE):
        raise ResourceNotFoundError(f"The USERS_FILE path '{USERS_FILE}' is not a valid file. Please check the configuration.")
    with open(USERS_FILE, 'r') as f:
        return json.load(f)

# Helper function to check password with bcrypt
def check_password(stored_password, provided_password):
    """
    Check if a provided password matches a stored password.
    
    Args:
        stored_password: The stored password (hashed or plaintext)
        provided_password: The provided password to check
        
    Returns:
        True if the passwords match, False otherwise
    """
    # Check if the stored password is already hashed (starts with $2b$)
    if stored_password.startswith('$2b$'):
        # Compare hashed password
        return bcrypt.checkpw(provided_password.encode('utf-8'), stored_password.encode('utf-8'))
    else:
        # For backward compatibility - plaintext comparison
        # This allows existing plaintext passwords to still work
        return stored_password == provided_password

# Helper function to hash password
def hash_password(password):
    """
    Hash a password using bcrypt.
    
    Args:
        password: The password to hash
        
    Returns:
        The hashed password
    """
    # Generate a salt and hash the password
    salt = bcrypt.gensalt()
    hashed = bcrypt.hashpw(password.encode('utf-8'), salt)
    return hashed.decode('utf-8')

@app.route('/login', methods=['GET', 'POST'])
def login():
    """Handle user login."""
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        
        # Set a maximum number of login attempts
        login_attempts = session.get('login_attempts', 0)
        
        # If too many attempts, show error
        if login_attempts >= 5:
            flash('Too many login attempts. Please try again later.', 'error')
            return render_template('login.html')
            
        try:
            users = load_users()
            
            if username in users and check_password(users[username]['password'], password):
                # Reset login attempts on successful login
                session.pop('login_attempts', None)
                
                # Set session variables
                session['username'] = username
                session['role'] = users[username]['role']
                session['name'] = users[username]['name']
                
                # Set session timeout (30 minutes)
                session.permanent = True
                app.permanent_session_lifetime = datetime.timedelta(minutes=30)
                
                # Set logging context for the user
                set_context(username=username, role=users[username]['role'])
                
                logger.info(f"User '{username}' logged in successfully")
                flash(f'Welcome, {users[username]["name"]}!', 'success')
                
                next_page = request.args.get('next')
                if next_page:
                    return redirect(next_page)
                return redirect(url_for('index'))
            else:
                # Increment login attempts
                session['login_attempts'] = login_attempts + 1
                logger.warning(f"Failed login attempt for user '{username}'")
                flash('Invalid username or password', 'error')
        except Exception as e:
            logger.error(f"Error during login: {str(e)}")
            flash('An error occurred during login. Please try again.', 'error')
    
    return render_template('login.html')

@app.route('/logout')
def logout():
    """Handle user logout."""
    username = session.get('username', 'unknown')
    session.clear()
    logger.info(f"User '{username}' logged out")
    flash('You have been logged out', 'success')
    return redirect(url_for('login'))

@app.route('/')
@login_required
def index():
    """Render the index page."""
    with log_errors(logger, "Error loading index page"):
        # Set context for the request
        set_context(
            action="view_index",
            user_role=session.get('role', ''),
            user_name=session.get('name', '')
        )
        
        # Get VSphere resources
        with logger.timer("fetch_vsphere_resources"):
            try:
                # Fetch vSphere resources with caching
                vs_resources = vsphere_resources.get_vsphere_resources(use_cache=True)
                
                # Get default IDs from configuration
                default_resource_pool_id = config.get('RESOURCE_POOL_ID', 'resgroup-9814670')
                default_dev_resource_pool_id = config.get('DEV_RESOURCE_POOL_ID', 'resgroup-3310245')
                default_datastore_id = config.get('DATASTORE_ID', 'datastore-4395110')
                default_network_id_prod = config.get('NETWORK_ID_PROD', 'dvportgroup-4545393')
                default_network_id_dev = config.get('NETWORK_ID_DEV', 'dvportgroup-4545393')
                default_template_id = config.get('TEMPLATE_UUID', 'vm-11682491')
                
                logger.info(f"Loaded {len(vs_resources['resource_pools'])} resource pools, "
                           f"{len(vs_resources['datastores'])} datastores, "
                           f"{len(vs_resources['networks'])} networks, "
                           f"{len(vs_resources['templates'])} templates")
                
            except Exception as e:
                logger.exception(f"Error loading vSphere resources: {str(e)}")
                # Create default resources if API call fails
                vs_resources = vsphere_resources.get_default_resources()
                logger.warning("Using default vSphere resources due to error")
                
                # Setup default IDs
                default_resource_pool_id = config.get('RESOURCE_POOL_ID', 'resgroup-9814670')
                default_dev_resource_pool_id = config.get('DEV_RESOURCE_POOL_ID', 'resgroup-3310245')
                default_datastore_id = config.get('DATASTORE_ID', 'datastore-4395110')
                default_network_id_prod = config.get('NETWORK_ID_PROD', 'dvportgroup-4545393')
                default_network_id_dev = config.get('NETWORK_ID_DEV', 'dvportgroup-4545393')
                default_template_id = config.get('TEMPLATE_UUID', 'vm-11682491')
        
        return render_template('index.html', 
                              server_prefixes=SERVER_PREFIXES,
                              environments=ENVIRONMENTS,
                              user_role=session.get('role', ''),
                              user_name=session.get('name', ''),
                              resource_pools=vs_resources['resource_pools'],
                              datastores=vs_resources['datastores'],
                              networks=vs_resources['networks'],
                              templates=vs_resources['templates'],
                              default_resource_pool_id=default_resource_pool_id,
                              default_datastore_id=default_datastore_id,
                              default_network_id=default_network_id_prod,
                              default_template_id=default_template_id)

@app.route('/submit', methods=['POST'])
@login_required
@validate_form('server_prefix', 'app_name')
def submit():
    """Handle VM configuration submission."""
    try:
        # Set context for this request
        set_context(
            action="submit_config",
            user_role=session.get('role', ''),
            user_name=session.get('name', '')
        )
        
        # Get form data
        server_prefix = request.form.get('server_prefix')
        app_name = request.form.get('app_name')
        quantity = int(request.form.get('quantity', 1))
        num_cpus = int(request.form.get('num_cpus', DEFAULT_CONFIG['num_cpus']))
        memory = int(request.form.get('memory', DEFAULT_CONFIG['memory']))
        disk_size = int(request.form.get('disk_size', DEFAULT_CONFIG['disk_size']))
        
        # Get vSphere resource selections
        resource_pool = request.form.get('resource_pool', config.get('RESOURCE_POOL_ID', 'resgroup-9814670'))
        datastore = request.form.get('datastore', config.get('DATASTORE_ID', 'datastore-4395110'))
        network = request.form.get('network', config.get('NETWORK_ID_PROD', 'dvportgroup-4545393'))
        template = request.form.get('template', config.get('TEMPLATE_UUID', 'vm-11682491'))
        
        # Determine environment based on server prefix
        environment = "production" if server_prefix in ENVIRONMENTS["prod"] else "development"
        
        # Validate input
        if not 3 <= len(app_name) <= 5:
            logger.warning(f"Invalid app name length: {len(app_name)}")
            flash('App name must be 3-5 characters', 'error')
            return redirect(url_for('index'))
            
        if server_prefix not in SERVER_PREFIXES:
            logger.warning(f"Invalid server prefix: {server_prefix}")
            flash('Invalid server prefix', 'error')
            return redirect(url_for('index'))
        
        # Additional disks processing
        additional_disks = []
        for i in range(3):  # Support up to 3 additional disks
            disk_size_key = f'additional_disk_size_{i}'
            disk_type_key = f'additional_disk_type_{i}'
            if disk_size_key in request.form and request.form[disk_size_key]:
                additional_disks.append({
                    'size': int(request.form[disk_size_key]),
                    'type': request.form.get(disk_type_key, 'thin')
                })
        
        # Generate unique ID for this request
        request_id = str(uuid.uuid4())[:8]
        timestamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
        
        # Construct server base name
        server_name = f"{server_prefix}-{app_name}"
        
        # Prepare configuration data
        config_data = {
            'request_id': request_id,
            'timestamp': timestamp,
            'server_name': server_name,
            'server_prefix': server_prefix,
            'app_name': app_name,
            'quantity': quantity,
            'num_cpus': num_cpus,
            'memory': memory,
            'disk_size': disk_size,
            'additional_disks': additional_disks,
            'environment': environment,
            'start_number': 10001,  # Starting number as per requirements
            'build_status': 'pending',
            'plan_status': 'pending',
            'approval_status': 'pending',
            'pr_url': '',
            'atlantis_url': '',
            'plan_log': '',
            'build_owner': session.get('name', 'unknown'),
            'build_username': session.get('username', 'unknown'),
            'created_at': datetime.datetime.now().isoformat()
        }
        
        # Save configuration to JSON file
        with logger.timer("save_config_file"):
            config_file = os.path.join(CONFIG_DIR, f"{request_id}_{timestamp}.json")
            with open(config_file, 'w') as f:
                json.dump(config_data, f, indent=2)
        
        # Generate Terraform configuration
        with logger.timer("generate_terraform"):
            tf_config = generate_terraform_config(config_data)
            
            # Save Terraform configuration
            tf_directory = os.path.join(TERRAFORM_DIR, f"{request_id}_{timestamp}")
            os.makedirs(tf_directory, exist_ok=True)
            
            machine_tf_file = os.path.join(tf_directory, "machine.tf")
            with open(machine_tf_file, 'w') as f:
                f.write(tf_config)
            
            # Create variables.tfvars file
            variables_file = os.path.join(tf_directory, "terraform.tfvars")
            generate_variables_file(variables_file, config_data)
        
        logger.info(f"VM configuration created successfully: {request_id}_{timestamp}")
        flash('VM configuration created successfully!', 'success')
        return redirect(url_for('show_config', request_id=request_id, timestamp=timestamp))
        
    except ValidationError as e:
        logger.warning(f"Validation error: {str(e)}")
        flash(f'Validation error: {str(e)}', 'error')
        return redirect(url_for('index'))
    except Exception as e:
        logger.exception(f"Error creating configuration: {str(e)}")
        flash(f'Error creating configuration: {str(e)}', 'error')
        return redirect(url_for('index'))

@app.route('/config/<request_id>_<timestamp>')
@login_required
def show_config(request_id, timestamp):
    """Show a specific VM configuration."""
    try:
        # Set context for this request
        set_context(
            action="view_config",
            request_id=request_id,
            timestamp=timestamp
        )
        
        # Load configuration
        config_file = os.path.join(CONFIG_DIR, f"{request_id}_{timestamp}.json")
        with open(config_file, 'r') as f:
            config_data = json.load(f)
            
        # Get path to Terraform files
        tf_directory = os.path.join(TERRAFORM_DIR, f"{request_id}_{timestamp}")
        machine_tf_file = os.path.join(tf_directory, "machine.tf")
        
        with open(machine_tf_file, 'r') as f:
            machine_tf = f.read()
            
        # Determine if the current user is the owner of this config
        is_owner = session.get('username') == config_data.get('build_username')
        
        logger.info(f"Showing configuration for request ID: {request_id}, timestamp: {timestamp}")
        return render_template(
            'config.html', 
            config=config_data, 
            machine_tf=machine_tf,
            request_id=request_id,
            timestamp=timestamp,
            user_role=session.get('role', ''),
            is_owner=is_owner
        )
    except FileNotFoundError:
        logger.error(f"Configuration file not found: {request_id}_{timestamp}")
        flash(f'Configuration not found: {request_id}_{timestamp}', 'error')
        return redirect(url_for('index'))
    except Exception as e:
        logger.exception(f"Error loading configuration: {str(e)}")
        flash(f'Error loading configuration: {str(e)}', 'error')
        return redirect(url_for('index'))

@app.route('/download/<request_id>_<timestamp>')
@login_required
def download_config(request_id, timestamp):
    """Download a configuration file."""
    try:
        # Set context for this request
        set_context(
            action="download_config",
            request_id=request_id,
            timestamp=timestamp
        )
        
        tf_directory = os.path.join(TERRAFORM_DIR, f"{request_id}_{timestamp}")
        machine_tf_file = os.path.join(tf_directory, "machine.tf")
        
        # This would typically send the file for download
        # For simplicity, we'll just display it
        with open(machine_tf_file, 'r') as f:
            content = f.read()
            
        logger.info(f"Configuration downloaded: {request_id}_{timestamp}")
        return jsonify({
            'status': 'success',
            'filename': f"{request_id}_{timestamp}_machine.tf",
            'content': content
        })
    except Exception as e:
        logger.exception(f"Error downloading configuration: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': str(e)
        })

@app.route('/configs')
@login_required
def list_configs():
    """List all configurations."""
    # Set context for this request
    set_context(action="list_configs")
    
    configs = []
    for filename in os.listdir(CONFIG_DIR):
        if filename.endswith('.json'):
            try:
                with open(os.path.join(CONFIG_DIR, filename), 'r') as f:
                    config = json.load(f)
                    configs.append({
                        'request_id': config.get('request_id', 'unknown'),
                        'timestamp': config.get('timestamp', 'unknown'),
                        'server_name': config.get('server_name', 'unknown'),
                        'quantity': config.get('quantity', 0),
                        'build_status': config.get('build_status', 'pending'),
                        'plan_status': config.get('plan_status', 'pending'),
                        'approval_status': config.get('approval_status', 'pending'),
                        'build_owner': config.get('build_owner', 'unknown'),
                        'build_username': config.get('build_username', 'unknown'),
                        'environment': config.get('environment', 'development'),
                        'filename': filename
                    })
            except json.JSONDecodeError:
                logger.warning(f"Skipping invalid JSON file: {filename}")
                continue
    
    # Sort configs by timestamp (newest first)
    configs.sort(key=lambda x: x['timestamp'], reverse=True)
    
    # Filter configs based on user role
    user_role = session.get('role', '')
    username = session.get('username', '')
    
    # If admin, show all configs
    # If builder, only show their configs or approved configs
    if user_role != ROLE_ADMIN:
        configs = [c for c in configs if c['build_username'] == username]
    
    logger.info(f"Listed {len(configs)} configurations")
    return render_template('configs.html', 
                          configs=configs, 
                          user_role=user_role)

@app.route('/plan/<request_id>_<timestamp>', methods=['POST'])
@login_required
def plan_config(request_id, timestamp):
    """Plan a Terraform configuration."""
    try:
        # Set context for this request
        set_context(
            action="plan_config",
            request_id=request_id,
            timestamp=timestamp
        )
        
        # Load configuration
        config_file = os.path.join(CONFIG_DIR, f"{request_id}_{timestamp}.json")
        with open(config_file, 'r') as f:
            config_data = json.load(f)
        
        # Check if user is owner or admin
        if session.get('username') != config_data.get('build_username') and session.get('role') != ROLE_ADMIN:
            logger.warning(f"Unauthorized plan attempt for {request_id}_{timestamp} by {session.get('username')}")
            flash('You do not have permission to plan this configuration', 'error')
            return redirect(url_for('show_config', request_id=request_id, timestamp=timestamp))
        
        # Get path to Terraform files
        tf_directory = os.path.join(TERRAFORM_DIR, f"{request_id}_{timestamp}")
        
        # Update plan status
        config_data['plan_status'] = 'planning'
        with open(config_file, 'w') as f:
            json.dump(config_data, f, indent=2)
        
        # Call Atlantis API to run plan
        with logger.timer("atlantis_plan"):
            plan_result = run_atlantis_plan(config_data, tf_directory)
        
        if plan_result and plan_result.get('status') == 'success':
            # Update config with plan info
            config_data['plan_status'] = 'completed'
            config_data['atlantis_url'] = plan_result.get('atlantis_url', '')
            config_data['plan_log'] = plan_result.get('plan_log', '')
            config_data['plan_id'] = plan_result.get('plan_id', '')
            
            with open(config_file, 'w') as f:
                json.dump(config_data, f, indent=2)
            
            logger.info(f"Terraform plan completed successfully for {request_id}_{timestamp}")
            flash('Terraform plan completed successfully!', 'success')
            return redirect(url_for('show_plan', request_id=request_id, timestamp=timestamp))
        else:
            # Update config with failure
            config_data['plan_status'] = 'failed'
            error_message = plan_result.get('message', 'Unknown error occurred') if plan_result else 'Plan process failed'
            config_data['plan_error'] = error_message
            
            with open(config_file, 'w') as f:
                json.dump(config_data, f, indent=2)
            
            logger.error(f"Plan failed for {request_id}_{timestamp}: {error_message}")
            flash(f'Plan failed: {error_message}', 'error')
            return redirect(url_for('show_config', request_id=request_id, timestamp=timestamp))
        
    except Exception as e:
        logger.exception(f"Error running Terraform plan for {request_id}_{timestamp}: {str(e)}")
        flash(f'Error running Terraform plan: {str(e)}', 'error')
        return redirect(url_for('show_config', request_id=request_id, timestamp=timestamp))

@app.route('/show_plan/<request_id>_<timestamp>')
@login_required
def show_plan(request_id, timestamp):
    """Show a Terraform plan."""
    try:
        # Set context for this request
        set_context(
            action="view_plan",
            request_id=request_id,
            timestamp=timestamp
        )
        
        # Load configuration
        config_file = os.path.join(CONFIG_DIR, f"{request_id}_{timestamp}.json")
        with open(config_file, 'r') as f:
            config_data = json.load(f)
        
        # Determine if the current user is the owner of this config
        is_owner = session.get('username') == config_data.get('build_username')
        
        logger.info(f"Showing plan for {request_id}_{timestamp}")
        return render_template(
            'plan.html',
            config=config_data,
            request_id=request_id,
            timestamp=timestamp,
            user_role=session.get('role', ''),
            is_owner=is_owner
        )
    except Exception as e:
        logger.exception(f"Error loading plan for {request_id}_{timestamp}: {str(e)}")
        flash(f'Error loading plan: {str(e)}', 'error')
        return redirect(url_for('configs'))

@app.route('/approve/<request_id>_<timestamp>', methods=['POST'])
@role_required(ROLE_ADMIN)
def approve_config(request_id, timestamp):
    """Approve a VM configuration."""
    try:
        # Set context for this request
        set_context(
            action="approve_config",
            request_id=request_id,
            timestamp=timestamp
        )
        
        # Load configuration
        config_file = os.path.join(CONFIG_DIR, f"{request_id}_{timestamp}.json")
        with open(config_file, 'r') as f:
            config_data = json.load(f)
        
        # Check if plan is completed
        if config_data.get('plan_status') != 'completed':
            logger.warning(f"Cannot approve {
