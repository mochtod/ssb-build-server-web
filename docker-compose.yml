services:
  web:
    build: .
    ports:
      - "5150:5150"  # Map port 5150 for the Flask app
    volumes:
      # Mount all necessary files for development to enable hot-reloading
      - ./configs:/app/configs
      - ./terraform:/app/terraform
      - ./users.json:/app/users.json
      - ./app.py:/app/app.py
      - ./vsphere_redis_cache.py:/app/vsphere_redis_cache.py
      - ./redis_client.py:/app/redis_client.py
      - ./terraform_executor.py:/app/terraform_executor.py  # Add volume mount for terraform_executor.py
      - ./templates:/app/templates
      - ./static:/app/static
      - ./logs:/app/logs
      - ./vm-workspace:/app/vm-workspace  # Make sure VM workspace is mounted
    environment:
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY:-change_this_to_a_random_secure_key}
      - CONFIG_DIR=/app/configs
      - TERRAFORM_DIR=/app/terraform
      - USERS_FILE=/app/users.json
      - DEBUG=True
      - FLASK_ENV=development
      - LOG_LEVEL=DEBUG
      # Terraform integration - now using local terraform installation
      - TIMEOUT=120
      # vSphere provider credentials for Terraform
      - TF_VAR_vsphere_server=${VSPHERE_SERVER}
      - TF_VAR_vsphere_user=${VSPHERE_USER}
      - TF_VAR_vsphere_password=${VSPHERE_PASSWORD}
      # Terraform auto-approve settings
      - TF_CLI_ARGS_apply=-auto-approve
      - TF_IN_AUTOMATION=true
      # Redis integration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_CACHE_TTL=${REDIS_CACHE_TTL:-3600}
      # Pass vSphere environment variables to the web container
      - VSPHERE_SERVER=${VSPHERE_SERVER}
      - VSPHERE_USER=${VSPHERE_USER}
      - VSPHERE_PASSWORD=${VSPHERE_PASSWORD}
      - VSPHERE_PORT=${VSPHERE_PORT:-443}
      - VSPHERE_USE_SSL=${VSPHERE_USE_SSL:-true}
    depends_on:
      - redis
    networks:
      - app-network
    restart: unless-stopped
    # Added command to increase logging
    command: >
      sh -c "python -u app.py 2>&1 | tee /app/logs/app.log"

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: >
      redis-server 
      --requirepass ""
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --loglevel notice
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  vsphere-sync:
    build: .
    command: python /app/vsphere_sync_scheduler.py
    volumes:
      # Use specific volume mounts instead of mounting the entire directory
      - ./configs:/app/configs
      - ./terraform:/app/terraform
      - ./vsphere_redis_cache.py:/app/vsphere_redis_cache.py
      - ./redis_client.py:/app/redis_client.py
    environment:
      # vSphere connection settings
      - VSPHERE_SERVER=${VSPHERE_SERVER}
      - VSPHERE_USER=${VSPHERE_USER}
      - VSPHERE_PASSWORD=${VSPHERE_PASSWORD}
      - VSPHERE_PORT=${VSPHERE_PORT:-443}
      - VSPHERE_USE_SSL=${VSPHERE_USE_SSL:-true}
      - VSPHERE_VERIFY_SSL=${VSPHERE_VERIFY_SSL:-false}
      # Redis connection settings
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_CACHE_TTL=${REDIS_CACHE_TTL:-3600}
      # Sync settings
      - VSPHERE_SYNC_INTERVAL_MINUTES=${VSPHERE_SYNC_INTERVAL_MINUTES:-15}
      - VSPHERE_CACHE_TTL=${VSPHERE_CACHE_TTL:-3600}
    depends_on:
      - redis
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  configs:
  terraform:
  redis-data:
    driver: local
