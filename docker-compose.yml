services:
  web:
    build: .
    ports:
      - "5150:5150"  # Map port 5150 for the Flask app
    volumes:
      - .:/app
      - ./configs:/app/configs:rw
      - ./terraform:/app/terraform
      - ./users.json:/app/users.json
      - ./vm-workspace:/app/vm-workspace
      - vsphere-cache:/app/.vsphere_cache
      - ./config:/app/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5150/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    environment:
      # Flask application config
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY:-change_this_to_a_random_secure_key}
      - CONFIG_DIR=/app/configs
      - TERRAFORM_DIR=/app/terraform
      - USERS_FILE=/app/users.json
      - DEBUG=True
      
      # Container discovery config
      - CONTAINER_NETWORK=app-network
      
      # Atlantis integration
      - ATLANTIS_HOST=atlantis 
      - ATLANTIS_PORT=4141
      - ATLANTIS_URL=http://atlantis:4141
      - ATLANTIS_TOKEN=${ATLANTIS_TOKEN:-your-atlantis-api-secret}
      - TIMEOUT=120
      
      # VSphere connection
      - VSPHERE_USER=${VSPHERE_USER:-vsphere-username}
      - VSPHERE_PASSWORD=${VSPHERE_PASSWORD:-vsphere-password}
      - VSPHERE_SERVER=${VSPHERE_SERVER:-virtualcenter.chrobinson.com}
      - VSPHERE_DATACENTERS=${VSPHERE_DATACENTERS:-EBDC NONPROD,EBDC PROD}
      
      # NetBox integration
      - NETBOX_HOST=netbox
      - NETBOX_PORT=8000
      - NETBOX_TOKEN=${NETBOX_TOKEN:-netbox-api-token}
      - NETBOX_URL=${NETBOX_URL:-https://netbox.chrobinson.com/api}
      
      # Redis cache configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    depends_on:
      atlantis:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  atlantis:
    image: ghcr.io/runatlantis/atlantis:latest
    ports:
      - "4141:4141"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4141/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - ATLANTIS_PORT=4141
      - ATLANTIS_ATLANTIS_URL=http://atlantis:4141
      # Local file mode configuration
      - ATLANTIS_REPO_ALLOWLIST=*
      - ATLANTIS_ENABLE_POLICY_CHECKS=false
      - ATLANTIS_AUTOPLAN_FILE_LIST=*.tf,*.tfvars
      - ATLANTIS_WRITE_GIT_CREDS=false
      - ATLANTIS_REPO_CONFIG=/etc/atlantis/repo-config.yaml
      - ATLANTIS_API_SECRET=${ATLANTIS_TOKEN:-your-atlantis-api-secret}
      # GitHub settings (dummy values for file mode)
      - ATLANTIS_GH_USER=fake
      - ATLANTIS_GH_TOKEN=fake
      # File mode configuration
      - ATLANTIS_ALLOW_REPO_CONFIG=true
      - ATLANTIS_ENABLE_DIFF_MARKDOWN_FORMAT=true
      - ATLANTIS_HIDE_PREV_PLAN_COMMENTS=true
      - ATLANTIS_WRITE_MODE=file
      # Project directory configuration
      - ATLANTIS_DATA_DIR=/tmp
      - ATLANTIS_PROJECT_DIR=/terraform
      - ATLANTIS_DEFAULT_TF_VERSION=1.0.0
      # VSphere connection for Terraform
      - VSPHERE_USER=${VSPHERE_USER:-vsphere-username}
      - VSPHERE_PASSWORD=${VSPHERE_PASSWORD:-vsphere-password}
      - VSPHERE_SERVER=${VSPHERE_SERVER:-virtualcenter.chrobinson.com}
      - VSPHERE_DATACENTERS=${VSPHERE_DATACENTERS:-EBDC NONPROD,EBDC PROD}
      # NetBox integration
      - NETBOX_TOKEN=${NETBOX_TOKEN:-netbox-api-token}
      - NETBOX_URL=${NETBOX_URL:-https://netbox.chrobinson.com/api}
    command: [
      "server", 
      "--disable-repo-locking", 
      "--repo-config=/etc/atlantis/repo-config.yaml", 
      "--atlantis-url=http://atlantis:4141", 
      "--gh-user=fake",
      "--gh-token=fake",
      "--repo-allowlist=*",
      "--web-basic-auth=false",
      "--tf-download=true"
    ]
    volumes:
      - ./atlantis-config:/etc/atlantis
      - ./terraform:/terraform
    user: root
    networks:
      - app-network
    restart: unless-stopped

  # Cache server for vSphere resource caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: unless-stopped

  # Uncomment this section when you're ready to add NetBox support
  # netbox:
  #   image: netboxcommunity/netbox:latest
  #   ports:
  #     - "8000:8000"
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8000/api/status/"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 60s
  #   environment:
  #     - SUPERUSER_EMAIL=admin@example.com
  #     - SUPERUSER_PASSWORD=admin
  #     - ALLOWED_HOSTS=*
  #     - DB_NAME=netbox
  #     - DB_USER=netbox
  #     - DB_PASSWORD=netbox
  #     - DB_HOST=postgres
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis-netbox:
  #       condition: service_healthy
  #   networks:
  #     - app-network
  #   restart: unless-stopped

  # postgres:
  #   image: postgres:13
  #   environment:
  #     - POSTGRES_USER=netbox
  #     - POSTGRES_PASSWORD=netbox
  #     - POSTGRES_DB=netbox
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "netbox"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   volumes:
  #     - pgdata:/var/lib/postgresql/data
  #   networks:
  #     - app-network
  #   restart: unless-stopped

  # redis:
  #   image: redis:6
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - app-network
  #   restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  configs:
  terraform:
  atlantis-data:
  redis-data:  # Redis cache volume
  vsphere-cache:  # Volume for vSphere cache files
  # pgdata:
